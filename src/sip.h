/**************************************************************************
 **
 ** sngrep - SIP callflow viewer using ngrep
 **
 ** Copyright (C) 2013 Ivan Alonso (Kaian)
 ** Copyright (C) 2013 Irontec SL. All rights reserved.
 **
 ** This program is free software: you can redistribute it and/or modify
 ** it under the terms of the GNU General Public License as published by
 ** the Free Software Foundation, either version 3 of the License, or
 ** (at your option) any later version.
 **
 ** This program is distributed in the hope that it will be useful,
 ** but WITHOUT ANY WARRANTY; without even the implied warranty of
 ** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 ** GNU General Public License for more details.
 **
 ** You should have received a copy of the GNU General Public License
 ** along with this program.  If not, see <http://www.gnu.org/licenses/>.
 **
 ****************************************************************************/
/**
 * @file sip.h
 * @author Ivan Alonso [aka Kaian] <kaian@irontec.com>
 *
 * @brief Functions to manage SIP calls and messages
 *
 * This file contains the functions and structures to manage the SIP calls and
 * messages.
 *
 * @todo Add iterator for calls. We could add some kind of filtering
 *
 */
#ifndef __SNGREP_SIP_H
#define __SNGREP_SIP_H

#include <sys/time.h>
#include <pthread.h>

//! Shorter declaration of sip_call structure
typedef struct sip_call sip_call_t;
//! Shorter declaration of sip_msg structure
typedef struct sip_msg sip_msg_t;

/** 
 * @brief Information of a single message withing a dialog.
 *
 * Most of the data is just stored to be displayed in the UI so
 * the formats may be no the best, but the simplest for this
 * purpose. It also works as a linked lists of messages in a 
 * call.
 *
 */
struct sip_msg
{
    //! FIXME for capturing at midnight?
    char date[9];
    //! FIXME this can be calculated
    char time[18];
    //! From Address including port
    char ip_from[22];
    //! To Address including port
    char ip_to[22];
    char sip_from[256];
    char sip_to[256];
    char type[40];
    int cseq;
    //! FIXME not required
    time_t timet;
    struct timeval ts;
    //! Temporal header data before being parsed
    char *headerptr;
    //! Temporal payload data before being parsed
    char *payloadptr;
    //! FIXME Payload in one struct
    const char *payload[80];
    //!! FIXME not required
    int plines;
    //! Flag to mark if payload data has been parsed
    int parsed;

    //! Message owner
    struct sip_call *call;
    //! Messages linked list
    struct sip_msg *next;
};

/**
 * @brief Contains all information of a call and its messages
 *
 * Most of the data is just stored to be displayed in the UI so
 * the formats may be no the best, but the simplest for this
 * purpose. It also works as a linked lists of calls
 *
 */
struct sip_call
{
    char *callid; // Call-ID for this call
    char xcallid[800]; // FIXME Dynamic length
    int finished; // XXX NYI
    pthread_mutex_t lock;

    //! List of messages of this call
    struct sip_msg *messages;
    //! Calls double linked list
    struct sip_call *next;
    struct sip_call *prev;
};

/**
 * @brief Parse header and payload into a new message
 *
 * This function parses ngrep header and SIP message payload to 
 * fill a sip_message structure.
 *
 * If no call is found with the given Call-ID, a new one will be
 * created and added to calls list.
 *
 * @param header ngrep header generated by -qpt arguments
 * @param payload SIP message payload
 * @returns the message structure @sip_msg or NULL if parsed failed
 *
 */
extern sip_msg_t *
sip_parse_message(const char *header, const char *payload);

/**
 * @brief Parses Call-ID header of a SIP message payload
 * 
 * @param payload SIP message payload
 * @returns callid parsed from Call-ID header 
 * @note the returned pointer MUST be deallocated after use
 */
extern char *
get_callid(const char* payload);

/**
 * @brief Create a new call with the given callid (Minimum required data)
 *
 * @param callid Call-ID Header value 
 * @returns pointer to the sip_call created
 */
extern sip_call_t *
call_new(const char *callid);

/**
 * @brief Parse header and payload and add the message to the given call
 *
 * Parse the ngrep header and payload and add the result message
 * to the given call.
 *
 * @param call pointer to the call owner of the message
 * @param header ngrep header generated by -qpt arguments
 * @param payload SIP message payload
 * @retursn the message structure or NULL if parsed failed
 */
extern sip_msg_t *
call_add_message(sip_call_t *call, const char *header, const char *payload);

/**
 * @brief Parse ngrep header line to get timestamps and ip addresses
 *
 * @param msg SIP message structure 
 * @param header ngrep header generated by -qpt arguments
 * @returns 0 on success, 1 on malformed header
 */
extern int
msg_parse_header(sip_msg_t *msg, const char *header);

/**
 * @brief Parse SIP Message payload to fill sip_msg structe
 * 
 * @param msg SIP message structure
 * @param payload SIP message payload
 * @returns 0 in all cases 
 */
extern int
msg_parse_payload(sip_msg_t *msg, const char *payload);

/**
 * @brief Find a call structure in calls linked list given an xcallid
 *
 * @param xcallid X-Call-ID or X-CID Header value
 * @returns pointer to the sip_call structure found or NULL 
 */
extern sip_call_t *
call_find_by_xcallid(const char *xcallid);

/**
 * @brief Find a call structure in calls linked list given an callid
 *
 * @param callid Call-ID Header value
 * @returns pointer to the sip_call structure found or NULL 
 */
extern sip_call_t *
call_find_by_callid(const char *callid);

/**
 * @brief Getter for calls linked list size
 *
 * @returns how many calls are linked in the list 
 */
extern int
get_n_calls();

/**
 * @brief Getter for call messages linked list size
 *
 * @returns how many messages are in the call
 */
extern int
get_n_msgs(sip_call_t *call);

/**
 * @brief Finds the other leg of this call.
 *
 * If this call has a X-CID or X-Call-ID header, that call will be
 * find and returned. Otherwise, a call with X-CID or X-Call-ID header 
 * matching the given call's Call-ID will be find or returned.
 *
 * @param call SIP call structure
 * @returns The other call structure or NULL if none found
 */
extern sip_call_t *
get_ex_call(sip_call_t *call);

/**
 * @brief Finds the next msg in a call.
 *
 * If the passed msg is NULL it returns the first message
 * in the call
 *
 * @param msg Actual SIP msg from the call (can be NULL)
 * @returns Next chronological message in the call
 */
extern sip_msg_t *
get_next_msg(sip_call_t *call, sip_msg_t *msg);

/**
 * @brief Finds the next msg in call and it's extended.
 *
 * If the passed msg is NULL it returns the first message
 * in the conversation
 *
 * @param call SIP call structure
 * @param msg Actual SIP msg from the call (can be NULL)
 * @returns Next chronological message in the conversation
 *
 */
extern sip_msg_t *
get_next_msg_ex(sip_call_t *call, sip_msg_t *msg);

/**
 * @brief Parse internal header and payload
 *
 * By default, only the first message of each call is parsed.
 * This function will parse the message (if it's not already parsed)
 * filling all internal fields.
 *
 * @param msg Not Parsed (or parsed) message
 * @return a parsed message
 */
extern sip_msg_t *
parse_msg(sip_msg_t *msg);

#endif
